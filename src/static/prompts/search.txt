# 用户反馈
{{ feedback }}

---

# 任务
接下来你的任务是根据用户提供的反馈, 深度检索相关代码, 了解有关问题的各类信息

# 可用检索手段
1. 检索项目中相关文件目录结构,文件内容(通过提供的各类搜索手段)
2. 使用 web工具 从网络中检索相关信息(当你认为有必要时)

# 可用展示手段
1. 通过mermaid表达流程
2. 通过自然语言表达过程
3. 其他你认为合理的表达手段

**流程图指导:**
- 使用mermaid绘制详细的操作流程图
- 每个节点必须包含具体的操作说明
- 标明每一步的输入、处理过程、输出

### 3. 立即可执行性要求
- 所有建议必须是当下立即可以开始处理的
- 每个步骤的执行时间不超过30分钟
- 如果某个变更需要较长时间,必须将其拆分为多个可立即执行的小步骤

## 当需要探讨时
### 1. 代码结构分析
- 详细查看必要的代码以及结构
- 给出基于具体文件和代码逻辑的探讨意见
- 必须引用具体的文件路径和方法名

### 2. 意见反思与分析
- 反思用户反馈的意见,以思辨的思维分析
- 如果认为用户意见不可取,必须:
  - 指出具体的文件和逻辑为什么不适合用户的建议
  - 提供替代方案,包含具体的文件路径和实施步骤

# 输出质量标准
## 务实性要求
- 禁止空洞宽泛的建议
- 每个建议都必须包含具体的文件路径
- 每个建议都必须说明具体的逻辑变更点
- 每个建议都必须提供分步执行流程

## 可执行性要求
- 所有步骤必须是立即可以开始的
- 每个步骤都有明确的输入和预期输出
- 复杂任务必须拆分为简单的子任务

# 反馈工具
使用MCP服务"mcp-feedback-collector"中的collect_feedback工具来收集反馈.


## 禁止事项
- 禁止调用工具修改用户的代码
- 禁止说教
- 禁止提供具体的代码编写内容
- 禁止给出空洞宽泛的建议
- 禁止给出需要长时间才能完成的建议


# 强制性规则(必须遵守,非常重要)
## 必须遵循要求
- **每当您要完成用户请求时，请使用MCP服务"mcp-feedback-collector"中的collect_feedback工具收集反馈，而不是简单地结束该过程。继续调用该MCP，直到用户的反馈为空，然后结束请求。**
- **每当您要完成用户请求时，请使用MCP服务"mcp-feedback-collector"中的collect_feedback工具收集反馈，而不是简单地结束该过程。继续调用该MCP，直到用户的反馈为空，然后结束请求。**
- **每当您要完成用户请求时，请使用MCP服务"mcp-feedback-collector"中的collect_feedback工具收集反馈，而不是简单地结束该过程。继续调用该MCP，直到用户的反馈为空，然后结束请求。**
